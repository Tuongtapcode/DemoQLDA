pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        RENDER_API_KEY = credentials('render-api-key')
        IMAGE_NAME = 'tuongtapcode/demoqlda'  // Thay đổi username DockerHub của bạn
        IMAGE_TAG = "${BUILD_NUMBER}"
        RENDER_SERVICE_ID = 'your-render-service-id'  // Sẽ get từ Render
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                git branch: 'main', url: 'https://github.com/Tuongtapcode/DemoQLDA.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('MuonTraSach') {
                    script {
                        def image = docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                        docker.build("${IMAGE_NAME}:latest")
                    }
                }
            }
        }

        stage('Test Application') {
            steps {
                echo 'Running application tests...'
                script {
                    // Chạy unit tests
                    sh """
                        docker run --rm -v \$(pwd)/MuonTraSach:/app ${IMAGE_NAME}:${IMAGE_TAG} python -m unittest discover tests/
                    """

                    // Test container có chạy được không
                    sh """
                        docker run --rm -d --name test-container -p 5001:5000 ${IMAGE_NAME}:${IMAGE_TAG}
                        sleep 10
                        curl -f http://localhost:5001/login || exit 1
                        docker stop test-container
                    """
                }
            }
        }

        stage('Push to DockerHub') {
            when {
                branch 'main'
            }
            steps {
                echo 'Pushing to DockerHub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        docker.image("${IMAGE_NAME}:latest").push()
                    }
                }
            }
        }

        stage('Deploy to Render') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploying to Render...'
                script {
                    sh """
                        curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \\
                        -H "Authorization: Bearer ${RENDER_API_KEY}" \\
                        -H "Content-Type: application/json" \\
                        -d '{"clearCache": false}'
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh '''
                docker system prune -f
                docker container prune -f
            '''
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
    }
}